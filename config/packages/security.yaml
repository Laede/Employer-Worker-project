security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt
        Symfony\Component\Security\Core\User\User: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        chain_provider:
            chain:
                providers: [in_memory, our_users]
        in_memory:
            memory:
                users:
                    admin:
                        password: $2y$13$94Oe/nzby6hGA/df/U1/Zup3RkBhYARAs8xidLcR1S.877Cnl7SeG
                        roles: 'ROLE_ADMIN'

        our_users:
            entity: { class: App\Entity\User, property: email }

    role_hierarchy:
            ROLE_ADMIN: [ROLE_EMPLOYER, ROLE_WORKER, ROLE_ALLOWED_TO_SWITCH]
            ROLE_EMPLOYER: [ROLE_EMPLOYER, ROLE_WORKER]
            ROLE_WORKER: [ROLE_WORKER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: ~
            form_login:
                login_path: login
                check_path: login
                username_parameter: login[email]
                password_parameter: login[password]
            logout:
                path: /logout
                target: /
            pattern:    ^/
            http_basic: ~
            provider: chain_provider

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/user, roles: [ROLE_EMPLOYER,ROLE_WORKER] }
        - { path: ^/worker, roles: ROLE_WORKER }
        - { path: ^/skills, roles: ROLE_ADMIN }
        - { path: ^/project, roles: ROLE_EMPLOYER }
